from collections import deque


class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        """Adds an edge between node u and node v (undirected graph)"""
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def bfs(self, start):
        """Performs Breadth-First Search (BFS)"""
        visited = set()
        queue = deque([start])
        visited.add(start)

        print("BFS Traversal:", end=" ")
        while queue:
            node = queue.popleft()
            print(node, end=" ")

            for neighbor in self.graph.get(node, []):
                if neighbor not in visited:
                    queue.append(neighbor)
                    visited.add(neighbor)
        print()

    def dfs(self, start, visited=None):
        """Performs Depth-First Search (DFS)"""
        if visited is None:
            visited = set()

        visited.add(start)
        print(start, end=" ")

        for neighbor in self.graph.get(start, []):
            if neighbor not in visited:
                self.dfs(neighbor, visited)


# Example usage:
if __name__ == "__main__":
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(1, 4)
    g.add_edge(2, 5)
    g.add_edge(2, 6)

    print("Graph Adjacency List:", g.graph)

    g.bfs(0)  # Starting BFS from node 0
    print("DFS Traversal:", end=" ")
    g.dfs(0)  # Starting DFS from node 0
    print()
